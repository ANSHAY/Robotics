import heapq                                # minheap for open_list of nodes
import math
import csv
import json
import random

# read obstacles form file
def read_obstacles(file_name):
    obstacles = []
    with open(file_name, 'r') as file:
        reader = csv.reader(file, delimiter=',')
        for row in reader:
            if(row[0][0].isnumeric()):
                obstacle = Obstacles(float(row[0]), float(row[1]), float(row[2])/2)
                obstacles.append(obstacle)
    return obstacles

# write nodes to file
def write_nodes(nodes, file_name):
    with open(file_name, 'w+') as file:
        writer = csv.writer(file, delimiter=',')
        for n in nodes.values():
            writer.writerow([n.id,n.x,n.y,n.h_cost])

# write edges to file
def write_edges(edges, file_name):
    with open(file_name, 'w+') as file:
        writer = csv.writer(file, delimiter=',')
        for n1,dict in edges.items():
            for n2,c in dict.items():
                writer.writerow([n1,n2,c])

# read config parameters
def read_params(file_name):
    with open(file_name, 'r') as file:
        params = json.load(file)
    return params

# read edges from file
def read_edges(file_name, nodes):
    edges = {}
    for n in nodes.keys():
        edges[n] = {}
    with open(file_name, 'r') as file:
        reader = csv.reader(file, delimiter=',')
        for row in reader:
            if(row[0][0].isnumeric()):
                edges[int(row[0])][int(row[1])] = float(row[2])
                edges[int(row[1])][int(row[0])] = float(row[2])
    return edges

# read nodes form file
def read_nodes(file_name):
    nodes = {}
    with open(file_name, 'r') as file:
        reader = csv.reader(file, delimiter=',')
        for row in reader:
            if(row[0][0].isnumeric()):
                node = Nodes(float(row[1]), float(row[2]), int(row[0]), float(row[3]))
                nodes[node.id] = node
    return nodes

# write path to file
def write_path(path, file_name):
    with open(file_name, 'w+') as file:
        writer = csv.writer(file, delimiter=',')
        writer.writerow(path)

class Tree:
    ''' Tree contains nodes and edges and functions to insert a'''
    '''new node in tree and find nearest node in tree'''
    '''nodes: nodes is a dictionary mapping node_id to the node'''
    '''       for faster access'''
    '''edges: edges is a dictionary mapping a node to its'''
    '''       connected nodes and the edge cost'''
    def __init__(self, node):
        node.id = 1
        self.nodes = {1:node}
        self.edges = {node.id:{}}
        self.size = 1
    def dist(self, n1, n2):
        ''' finds Eucledian distance between two nodes'''
        return math.sqrt((n1.x-n2.x)**2+(n1.y-n2.y)**2)
    def connect(self, x_near, x_new):
        '''connect x_new node to x_near and adds to tree if new'''
        '''assigns an id to the node and h_cost before inserting in tree'''
        x_new = self.insert(x_new)
        d = self.dist(x_near, x_new)
        self.edges[x_new.id][x_near.id] = d
        self.edges[x_near.id][x_new.id] = d
    def insert(self, node):
        '''inserts a new node in tree and returns the inserted node'''
        '''if a node exists, returns the existing node'''
        nn = self.nearest(node)
        if(self.dist(node,nn) > 0.001):
            self.size += 1
            node.id = self.size
            self.edges[node.id] = {}
            self.nodes[node.id] = node
            return node
        return nn
    def nearest(self, node):
        '''search for nearest node to node'''
        d = 999
        for n in self.nodes.values():
            d_new = self.dist(n,node)
            if(d_new<=d):
                x_near = n
                d = d_new
        return x_near
    def update_h_cost(self, goal):
        for n in self.nodes.values():
            n.h_cost = self.dist(n, goal)
    def k_nearest_neighbors(self, node, k=3):
        '''find k nearest neighbor nodes to the given node'''
        '''return list of nodes neighbor to node'''
        neighbors = []
        for n in self.nodes.values():
            if(node.id!=n.id):
                heapq.heappush(neighbors, (self.dist(n,node),n))
        return [heapq.heappop(neighbors)[1] for _ in range(k)]

class Obstacles:
    '''Obstacle calss for circular obstacles with '''
    '''location (x,y) and radius r'''
    def __init__(self, x=0, y=0, r=0):
        self.x = x
        self.y = y
        self.r = r

class Nodes:
    def __init__(self, x=0, y=0, id=-1, h_cost=0, parent_node=0):
        self.id = id
        self.x = x
        self.y = y
        self.children = {}
        self.h_cost = h_cost
        self.parent = parent_node
        self.past_cost = 0.0 if(id==1) else float('inf')
        self.est_cost = self.h_cost + self.past_cost
    def __lt__(self, other):                     # comparison function on nodes
        return self.est_cost <= other.est_cost

# A* algorithm
def a_star(nodes, edges):
    path = []                                           # path for output
    open = list(nodes.values())                         # open list of nodes
    heapq.heapify(open)
    closed = {}                                         # closed list
    for n in nodes.keys():
        closed[n] = False
    goal_id = len(nodes)                                # goal node id
    while (len(open) > 0):
        # take first node from open_list and put into current
        current = heapq.heappop(open)
        closed[current.id] = True
        # if current is same as goal then success. Build the path and return
        if current.id == goal_id:
            # update path from current to 1
            while current.id != 1:
                path.append(current.id)
                current = current.parent
            path.append(1)
            return path[::-1]
        # if current is not the goal then look at all neighbors of current
        for n in edges[current.id].keys():
            nbr = nodes[n]
            if not closed[nbr.id]:
                tentative_past_cost = current.past_cost + edges[current.id][nbr.id]
                if tentative_past_cost < nbr.past_cost:
                    nbr.past_cost = tentative_past_cost
                    nbr.parent = current
                    nbr.est_cost = nbr.past_cost + nbr.h_cost
                    # heapify updates the open_list according to estimated cost
                    heapq.heapify(open)
    return [1]


def dist(n1, n2):
    ''' finds Eucledian distance between two nodes'''
    return math.sqrt((n1.x-n2.x)**2+(n1.y-n2.y)**2)

def sampler(X):
    '''returns a sample from X'''
    x = random.uniform(X[0], X[1])
    y = random.uniform(X[2], X[3])
    x_samp = Nodes(x, y)
    return x_samp

def local_planner(x_near, x_samp):
    '''returns a new node along the line from'''
    '''x_near to x_samp at distance d'''
    factor = 2
    x = x_near.x + (x_samp.x - x_near.x)/factor
    y = x_near.y + (x_samp.y - x_near.y)/factor
    x_new = Nodes(x, y)
    return x_new

def is_collision(A, B, obstacles):
    '''checks if any obstacle is in collision with line segment'''
    '''between nodes A and B'''
    eps = 0.001
    d_AB = dist(A,B)
    for C in obstacles:
        # D is a point on AB such that CD is normal to AB
        dot = ((C.x-A.x)*(B.x-A.x) + (C.y-A.y)*(B.y-A.y))/(d_AB*d_AB+eps)
        d_AD = abs(dot*d_AB)
        x = A.x + (B.x-A.x)*dot
        y = A.y + (B.y-A.y)*dot
        D = Obstacles(x, y)
        d_BD = dist(B, D)
        d_DC = dist(D, C)
        if d_DC > C.r:
            continue
        if (abs(d_AD+d_BD-d_AB) < eps):
            return True
        if (d_AD<=C.r or d_BD<=C.r):
            return True
    return False

def inCfree(node, obstacles):
    '''checks if a given node lies in Cfree or not'''
    for C in obstacles:
        if (dist(node, C) <= C.r+0.01):
            return False
    return True


def PRM(obstacles, x_start, x_goal, num_samples, k_neighbors, X):
    '''PRM Algo to compute a graph of nodes and edges'''
    '''inputs:'''
    ''' x_start:        starting node'''
    ''' num_samples:    number of nodes to pick in environment'''
    ''' k_neighbors:    number of neighors to connect every node'''
    ''' obstacles:      all the obstacles that are in the environment'''
    ''' X:              bounds of the environment [x0, x1, y0, y1]'''
    ''' x_goal:         goal node'''
    '''output:'''
    ''' T:              Tree consisting of nodes and edges'''
    # initialize Tree
    T = Tree(x_start)
    R = Tree(x_start)
    i = 0
    while(i < num_samples):
        node = sampler(X)
        if (inCfree(node, obstacles)):
            T.insert(node)
            i += 1
    for node in T.nodes.values():
        neighbors = T.k_nearest_neighbors(node, k_neighbors)
        for n in neighbors:
            if(not is_collision(n, node, obstacles)):
                R.insert(node)
                R.connect(node,n)
    node = R.nearest(x_goal)
    R.connect(node, x_goal)
    R.update_h_cost(x_goal)
    return R


def RRT(obstacles, x_start, x_goal, max_tree_size, X):
    '''RRT Algo to compute a tree of nodes and edges'''
    '''inputs:'''
    ''' x_start:        starting node'''
    ''' max_tree_size:  maximum allowed size of tree'''
    ''' obstacles:      all the obstacles that are in the environment'''
    ''' X:              bounds of the environment [x0, x1, y0, y1]'''
    ''' x_goal:         goal node'''
    '''output:'''
    ''' T:              Tree consisting of nodes and edges'''
    T = Tree(x_start)
    eps = 0.001
    count = 0
    while(T.size <= max_tree_size):             ## loop until max size is reached
        if(count % (max_tree_size*0.1)==0):     ## use goal node as sample every 10% samples
            x_samp = x_goal
            count = 0
            print(".", end='')
        else:
            x_samp = sampler(X)
        x_near = T.nearest(x_samp)
        x_new = local_planner(x_near, x_samp)
        if(not is_collision(x_new, x_near, obstacles)):
            T.connect(x_near, x_new)
            if (abs(x_new.x - x_goal.x) < eps and abs(x_new.y - x_goal.y) < eps):
                T.update_h_cost(x_goal)
                return T
        count+=1
        #print(T.size, end=' ')
    print("\nSolution not found in given Tree size limit. Try bigger tree\n")
    return T

if __name__=="__main__":
    ## Define file names for input data
    file_obstacles = "../results/obstacles.csv"
    file_path = "../results/path.csv"
    file_nodes = "../results/nodes.csv"
    file_edges = "../results/edges.csv"
    file_param = "../results/params.json"
    ## read obstacles from file
    obstacles = read_obstacles(file_obstacles)
    ## read params from file
    PARAM = read_params(file_param)
    ## Run RRT algo to create a Tree of nodes and edges
    x_start = Nodes(PARAM['x_start']['x'],PARAM['x_start']['y'], 1)
    x_goal = Nodes(PARAM['x_goal']['x'], PARAM['x_goal']['y'])
    print("\nFiles and parameters read...")
    print("\nRunning Algo...")
    if PARAM["algo"] == "PRM":
        T = PRM(obstacles, x_start, x_goal, PARAM['num_samples'], PARAM['k_neighbors'], PARAM['X'])
    else:
        T = RRT(obstacles, x_start, x_goal, PARAM['max_tree_size'], PARAM['X'])
    print("\nAlgo completed...")
    if T.size >= PARAM['max_tree_size']:
        print("\nMax tree size reached!!")
    nodes = T.nodes
    edges = T.edges
    print("\nWriting nodes and edges to file...")
    write_nodes(nodes, file_nodes)
    write_edges(edges, file_edges)
    ## Find the optimal path using A* and write it to file
    print("\nComputing Optimal Path")
    path = a_star(nodes, edges)
    write_path(path, file_path)
    print("\nSUCCESS")
